if(murre_sex$Sex_Final[match(Band2, murre_sex$Bandno)]=="M")
{
pair_data$AgeMale = as.numeric(ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)),NA,
ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpMale = murre_to2011$YEAR[i] - min(Bird2$YEAR)
pair_data$ExpFemale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
} else
{
pair_data$AgeFemale = as.numeric(ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5))
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpFemale = murre_to2011$YEAR[i] - min(Bird2$YEAR)
pair_data$ExpMale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
}}  else
# if none of the birds has been sexed molecularly we still have an idea of the sex, so calculate age per sex based on best guess
if(!is.na(murre_to2011$infSEX1[i]) & murre_to2011$infSEX1[i] == "M")
{
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)), NA, ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$ExpMale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
pair_data$ExpFemale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
}  else
if(!is.na(murre_to2011$infSEX1[i]) & murre_to2011$infSEX1[i] == "M")
{
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)), NA, ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpMale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
pair_data$ExpFemale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
} else
{pair_data$AgeMale = NA
pair_data$AgeFemale = NA
pair_data$ExpMale = NA
pair_data$ExpFemale = NA
}
pair_data$PairBond = ifelse(is.na(match(Band1, banding$BandNo)) | is.na(match(Band2, banding$BandNo)), NA, nrow(subset(Bond, YEAR <= murre_to2011$YEAR[i]))-1)
divorce_data = rbind(divorce_data, pair_data)
}}
}
pair_data$Hatching
pair_data$Hatching - 33
divorce_data = NULL
for (i in 1:nrow(murre_to2011))
{
pair_data = data.frame(Site = 0, Year = 0, BandNo1 = 0, BandNo2 = 0, Outcome = 0, Laying = 0, Hatching = 0, Fledge = 0, AgeMale = 0, AgeFemale = 0, ExpMale = 0, ExpFemale = 0, PairBond = 0)
Band1 = murre_to2011$BANDN01[i]
Band2 = murre_to2011$BANDNO2[i]
if(!is.na(Band1) & !is.na(Band2))
{
Bird1 = murre_to2011[murre_to2011$BANDN01 == Band1 & !is.na(murre_to2011$BANDN01) | murre_to2011$BANDNO2 == Band1 & !is.na(murre_to2011$BANDNO2),]
Bird1 = Bird1[order(Bird1$YEAR),]
Bird1_noNA = Bird1[!is.na(Bird1$BANDN01) & !is.na(Bird1$BANDNO2),]
Bird2 = murre_to2011[murre_to2011$BANDNO2 == Band2 & !is.na(murre_to2011$BANDNO2) | murre_to2011$BANDN01 == Band2 & !is.na(murre_to2011$BANDN01),]
Bird2 = Bird2[order(Bird2$YEAR),]
Bird2_noNA = Bird2[!is.na(Bird2$BANDN01) & !is.na(Bird2$BANDNO2),]
Bond = murre_to2011[murre_to2011$BANDN01 == Band1 & !is.na(murre_to2011$BANDN01) & murre_to2011$BANDNO2 == Band2 & !is.na(murre_to2011$BANDNO2) | murre_to2011$BANDN01 == Band2 & !is.na(murre_to2011$BANDN01) & murre_to2011$BANDNO2 == Band1 & !is.na(murre_to2011$BANDNO2),]
if(!any(table(Bird1$YEAR)>1) & !any(table(Bird2$YEAR)>1))
{
pair_data$Site = as.factor(murre_to2011$PLOT_SITE[i])
pair_data$Year = murre_to2011$YEAR[i]
pair_data$BandNo1 = murre_to2011$BANDN01[i]
pair_data$BandNo2 = murre_to2011$BANDNO2[i]
if (is.na(Band1) | is.na(Band2))
{pair_data$Outcome = "NO"} else
if (!is.na(Band1) & !is.na(Band2) & max(Bird1$YEAR) == pair_data$Year | max(Bird2$YEAR) == pair_data$Year)
{pair_data$Outcome = "DEAD"} else
if (!is.na(Band1) & !is.na(Band2) & nrow(Bird1_noNA) > 1 & nrow(Bird2_noNA) > 1)
{ if(Bird1[which(Bird1$YEAR== pair_data$Year)+1,2] == pair_data$Year + 1 & !is.na(Bird1[which(Bird1$YEAR== pair_data$Year)+1,45]) & !is.na(Bird1[which(Bird1$YEAR== pair_data$Year)+1,45]))
{ if (Bird1_noNA[which(Bird1_noNA$YEAR== pair_data$Year)+1,45] == Band2 | Bird1_noNA[which(Bird1_noNA$YEAR== pair_data$Year)+1,37] == Band2)
{pair_data$Outcome = "SAME"} else
{pair_data$Outcome = "DIV"}} else
{pair_data$Outcome = "DIV"}} else
{pair_data$Outcome = "DIV"}
#any(Bird1$YEAR > pair_data$Year) & any(Bird2$YEAR > pair_data$Year))
pair_data$Laying = as.numeric(ifelse(!is.na(murre_to2011$LAY1[i]), murre_to2011$LAY1[i],ifelse(!is.na(murre_to2011$LAY2[i]), murre_to2011$LAY2[i], murre_to2011$EST_LAY[i])))
pair_data$Hatching = as.numeric(ifelse(!is.na(murre_to2011$HATCH1[i]), murre_to2011$HATCH1[i],ifelse(!is.na(murre_to2011$HATCH2[i]), murre_to2011$HATCH2[i], murre_to2011$EST_HATCH[i])))
pair_data$Laying = ifelse(!is.na(pair_data$Laying),pair_data$Laying, ifelse(!is.na(pair_data$Hatching), pair_data$Hatching - 33, NA))
pair_data$Fledge = ifelse(murre_to2011$GI_OUT_corrected[i] == 0 | murre_to2011$GI_OUT_corrected[i] == 1, 0, ifelse(murre_to2011$GI_OUT_corrected[i] == 2, 1, NA))
# some birds have been sexed molecularly, so first find out if one of them has been and calculate age per sex based on that
if(!is.na(match(Band1, murre_sex$Bandno)))
{
if(murre_sex$Sex_Final[match(Band1, murre_sex$Bandno)]=="M")
{
pair_data$AgeMale = as.numeric(ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)),NA,
ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$ExpMale = murre_to2011$YEAR[i] - min(Bird1$YEAR)
pair_data$ExpFemale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
} else
{
pair_data$AgeFemale = as.numeric(ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5))
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)), NA, ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$ExpFemale = murre_to2011$YEAR[i] - min(Bird1$YEAR)
pair_data$ExpMale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
}
} else
if(!is.na(match(Band2, murre_sex$Bandno)))
{
if(murre_sex$Sex_Final[match(Band2, murre_sex$Bandno)]=="M")
{
pair_data$AgeMale = as.numeric(ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)),NA,
ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpMale = murre_to2011$YEAR[i] - min(Bird2$YEAR)
pair_data$ExpFemale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
} else
{
pair_data$AgeFemale = as.numeric(ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5))
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpFemale = murre_to2011$YEAR[i] - min(Bird2$YEAR)
pair_data$ExpMale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
}}  else
# if none of the birds has been sexed molecularly we still have an idea of the sex, so calculate age per sex based on best guess
if(!is.na(murre_to2011$infSEX1[i]) & murre_to2011$infSEX1[i] == "M")
{
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)), NA, ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$ExpMale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
pair_data$ExpFemale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
}  else
if(!is.na(murre_to2011$infSEX1[i]) & murre_to2011$infSEX1[i] == "M")
{
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)), NA, ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpMale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
pair_data$ExpFemale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
} else
{pair_data$AgeMale = NA
pair_data$AgeFemale = NA
pair_data$ExpMale = NA
pair_data$ExpFemale = NA
}
pair_data$PairBond = ifelse(is.na(match(Band1, banding$BandNo)) | is.na(match(Band2, banding$BandNo)), NA, nrow(subset(Bond, YEAR <= murre_to2011$YEAR[i]))-1)
divorce_data = rbind(divorce_data, pair_data)
}}
}
divorce_data = NULL
for (i in 1:nrow(murre_to2011))
{
pair_data = data.frame(Site = 0, Year = 0, BandNo1 = 0, BandNo2 = 0, Outcome = 0, Laying = 0, Hatching = 0, Fledge = 0, AgeMale = 0, AgeFemale = 0, AgeBird1 = 0, AgeBird2 = 0, ExpMale = 0, ExpFemale = 0, ExpBird1 = 0, ExpBird2 = 0, PairBond = 0)
Band1 = murre_to2011$BANDN01[i]
Band2 = murre_to2011$BANDNO2[i]
if(!is.na(Band1) & !is.na(Band2))
{
Bird1 = murre_to2011[murre_to2011$BANDN01 == Band1 & !is.na(murre_to2011$BANDN01) | murre_to2011$BANDNO2 == Band1 & !is.na(murre_to2011$BANDNO2),]
Bird1 = Bird1[order(Bird1$YEAR),]
Bird1_noNA = Bird1[!is.na(Bird1$BANDN01) & !is.na(Bird1$BANDNO2),]
Bird2 = murre_to2011[murre_to2011$BANDNO2 == Band2 & !is.na(murre_to2011$BANDNO2) | murre_to2011$BANDN01 == Band2 & !is.na(murre_to2011$BANDN01),]
Bird2 = Bird2[order(Bird2$YEAR),]
Bird2_noNA = Bird2[!is.na(Bird2$BANDN01) & !is.na(Bird2$BANDNO2),]
Bond = murre_to2011[murre_to2011$BANDN01 == Band1 & !is.na(murre_to2011$BANDN01) & murre_to2011$BANDNO2 == Band2 & !is.na(murre_to2011$BANDNO2) | murre_to2011$BANDN01 == Band2 & !is.na(murre_to2011$BANDN01) & murre_to2011$BANDNO2 == Band1 & !is.na(murre_to2011$BANDNO2),]
if(!any(table(Bird1$YEAR)>1) & !any(table(Bird2$YEAR)>1))
{
pair_data$Site = as.factor(murre_to2011$PLOT_SITE[i])
pair_data$Year = murre_to2011$YEAR[i]
pair_data$BandNo1 = murre_to2011$BANDN01[i]
pair_data$BandNo2 = murre_to2011$BANDNO2[i]
if (is.na(Band1) | is.na(Band2))
{pair_data$Outcome = "NO"} else
if (!is.na(Band1) & !is.na(Band2) & max(Bird1$YEAR) == pair_data$Year | max(Bird2$YEAR) == pair_data$Year)
{pair_data$Outcome = "DEAD"} else
if (!is.na(Band1) & !is.na(Band2) & nrow(Bird1_noNA) > 1 & nrow(Bird2_noNA) > 1)
{ if(Bird1[which(Bird1$YEAR== pair_data$Year)+1,2] == pair_data$Year + 1 & !is.na(Bird1[which(Bird1$YEAR== pair_data$Year)+1,45]) & !is.na(Bird1[which(Bird1$YEAR== pair_data$Year)+1,45]))
{ if (Bird1_noNA[which(Bird1_noNA$YEAR== pair_data$Year)+1,45] == Band2 | Bird1_noNA[which(Bird1_noNA$YEAR== pair_data$Year)+1,37] == Band2)
{pair_data$Outcome = "SAME"} else
{pair_data$Outcome = "DIV"}} else
{pair_data$Outcome = "DIV"}} else
{pair_data$Outcome = "DIV"}
#any(Bird1$YEAR > pair_data$Year) & any(Bird2$YEAR > pair_data$Year))
pair_data$Laying = as.numeric(ifelse(!is.na(murre_to2011$LAY1[i]), murre_to2011$LAY1[i],ifelse(!is.na(murre_to2011$LAY2[i]), murre_to2011$LAY2[i], murre_to2011$EST_LAY[i])))
pair_data$Hatching = as.numeric(ifelse(!is.na(murre_to2011$HATCH1[i]), murre_to2011$HATCH1[i],ifelse(!is.na(murre_to2011$HATCH2[i]), murre_to2011$HATCH2[i], murre_to2011$EST_HATCH[i])))
pair_data$Laying = ifelse(!is.na(pair_data$Laying),pair_data$Laying, ifelse(!is.na(pair_data$Hatching), pair_data$Hatching - 33, NA))
pair_data$Fledge = ifelse(murre_to2011$GI_OUT_corrected[i] == 0 | murre_to2011$GI_OUT_corrected[i] == 1, 0, ifelse(murre_to2011$GI_OUT_corrected[i] == 2, 1, NA))
# some birds have been sexed molecularly, so first find out if one of them has been and calculate age per sex based on that
if(!is.na(match(Band1, murre_sex$Bandno)))
{
if(murre_sex$Sex_Final[match(Band1, murre_sex$Bandno)]=="M")
{
pair_data$AgeMale = as.numeric(ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)),NA,
ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$ExpMale = murre_to2011$YEAR[i] - min(Bird1$YEAR)
pair_data$ExpFemale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
} else
{
pair_data$AgeFemale = as.numeric(ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5))
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)), NA, ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$ExpFemale = murre_to2011$YEAR[i] - min(Bird1$YEAR)
pair_data$ExpMale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
}
} else
if(!is.na(match(Band2, murre_sex$Bandno)))
{
if(murre_sex$Sex_Final[match(Band2, murre_sex$Bandno)]=="M")
{
pair_data$AgeMale = as.numeric(ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)),NA,
ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpMale = murre_to2011$YEAR[i] - min(Bird2$YEAR)
pair_data$ExpFemale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
} else
{
pair_data$AgeFemale = as.numeric(ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5))
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpFemale = murre_to2011$YEAR[i] - min(Bird2$YEAR)
pair_data$ExpMale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
}}  else
# if none of the birds has been sexed molecularly we still have an idea of the sex, so calculate age per sex based on best guess
if(!is.na(murre_to2011$infSEX1[i]) & murre_to2011$infSEX1[i] == "M")
{
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)), NA, ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$ExpMale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
pair_data$ExpFemale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
}  else
if(!is.na(murre_to2011$infSEX1[i]) & murre_to2011$infSEX1[i] == "M")
{
pair_data$AgeMale = as.numeric(ifelse(is.na(match(Band2, banding$BandNo)), NA, ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5)))
pair_data$AgeFemale = as.numeric(ifelse(is.na(match(Band1, banding$BandNo)), NA, ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5)))
pair_data$ExpMale = ifelse(is.na(match(Band2, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird2$YEAR))
pair_data$ExpFemale = ifelse(is.na(match(Band1, banding$BandNo)), NA, murre_to2011$YEAR[i] - min(Bird1$YEAR))
} else
{pair_data$AgeMale = NA
pair_data$AgeFemale = NA
pair_data$ExpMale = NA
pair_data$ExpFemale = NA
}
if(!is.na(pair_data$AgeMale))
{
pair_data$AgeBird1 = pair_data$AgeMale
pair_data$ExpBird1 = pair_data$ExpMale
} else
if(!is.na(match(Band1, banding$BandNo)))
{
pair_data$AgeBird1 = as.numeric(ifelse(banding[match(Band1, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band1, banding$BandNo),1] + 5))
pair_data$ExpBird1 = murre_to2011$YEAR[i] - min(Bird1$YEAR)
} else
{pair_data$AgeBird1 = NA
pair_data$ExpBird1 = NA}
if(!is.na(pair_data$AgeFemale))
{
pair_data$AgeBird2 = pair_data$AgeFemale
pair_data$ExpBird2 = pair_data$ExpFemale
} else
if(!is.na(match(Band2, banding$BandNo)))
{
pair_data$AgeBird2 = as.numeric(ifelse(banding[match(Band2, banding$BandNo),3]=="C", murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1], murre_to2011$YEAR[i] - banding[match(Band2, banding$BandNo),1] + 5))
pair_data$ExpBird2 = murre_to2011$YEAR[i] - min(Bird2$YEAR)
} else
{pair_data$AgeBird2 = NA
pair_data$ExpBird2 = NA}
pair_data$PairBond = ifelse(is.na(match(Band1, banding$BandNo)) | is.na(match(Band2, banding$BandNo)), NA, nrow(subset(Bond, YEAR <= murre_to2011$YEAR[i]))-1)
divorce_data = rbind(divorce_data, pair_data)
}}
}
sub_qlty = site_qlty[site_qlty$TOT_NB_REPRO >= 4,] # keeping sites with at least 4 reproductive attempts to have a decent estimate of quality
sub_qlty = sub_qlty[,c(1,4)]
divorce_data = merge(divorce_data, sub_qlty, by.x = "Site", by.y = "PLOT_SITE", all.x = TRUE)
sub_murre_data = subset(murre_data, YEAR <= 2011 & GI_OUT_corrected <= 2)
site_qlty = with(sub_murre_data, aggregate(GI_OUT_corrected, by = list(PLOT_SITE),length))
colnames(site_qlty) = c("PLOT_SITE","TOT_NB_REPRO")
site_qlty$SUCC_REPRO = 0
SUCC_REPRO = with(subset(sub_murre_data, GI_OUT_corrected == 2), aggregate(GI_OUT_corrected, by = list(PLOT_SITE),length))
colnames(SUCC_REPRO) = c("PLOT_SITE","NB_SUCC")
for(i in 1:nrow(site_qlty))
{
site_qlty$SUCC_REPRO[i] = ifelse(!is.na(SUCC_REPRO[match(site_qlty$PLOT_SITE[i],SUCC_REPRO$PLOT_SITE),2]),SUCC_REPRO[match(site_qlty$PLOT_SITE[i],SUCC_REPRO$PLOT_SITE),2],0)
}
site_qlty$QLTY = site_qlty$SUCC_REPRO / site_qlty$TOT_NB_REPRO
site_qlty$QLTY = site_qlty$SUCC_REPRO / site_qlty$TOT_NB_REPRO
write.table(site_qlty, "site_qlty_Coats_1990_2011.csv", row.names = FALSE, dec = ".", sep = ",")
sub_qlty = site_qlty[site_qlty$TOT_NB_REPRO >= 4,] # keeping sites with at least 4 reproductive attempts to have a decent estimate of quality
sub_qlty = sub_qlty[,c(1,4)]
divorce_data = merge(divorce_data, sub_qlty, by.x = "Site", by.y = "PLOT_SITE", all.x = TRUE)
View(divorce_data)
write.table(divorce_data,"TBMU_Coats_divorce_data.csv", row.names = FALSE, dec =".", sep = ",")
View(murre_to2011)
rm(list=ls())
setwd("D:/Thomas/Google Drive/postdoc/FQRNT murre project/murre data/TBMU-divorce")
TBMU_divorce = read.table("TBMU_Coats_divorce_data.csv", header = TRUE, sep = ",")
View(TBMU_divorce)
table(TBMU_divorce$Laying)
TBMU_divorce = read.table("TBMU_Coats_divorce_data.csv", header = TRUE, sep = ",")
table(TBMU_divorce$Laying)
table(is.na(TBMU_divorce$Laying))
library(dplyr)
View(TBMU_divorce)
levels(TBMU_divorce$Outcome)
TBMU_divorce = TBMU_divorce >%> filter(Outcome != "DEAD")
TBMU_divorce = TBMU_divorce %>% filter(Outcome != "DEAD")
TBMU_divorce = read.table("TBMU_Coats_divorce_data.csv", header = TRUE, sep = ",")
table(TBMU_divorce$Outcome)
TBMU_divorce = read.table("TBMU_Coats_divorce_data.csv", header = TRUE, sep = ",")
dim(TBMU_divorce)
TBMU_divorce = TBMU_divorce %>% filter(Outcome != "DEAD")
dim(TBMU_divorce)
View(TBMU_divorce)
TBMU_divorce = TBMU_divorce %>% filter(Outcome != "DEAD")
dim(TBMU_divorce)
TBMU_divorce = TBMU_divorce %>% mutate(ProbDiv = if_else(Outcome == "DIV",1,0))
View(TBMU_divorce)
View(TBMU_divorce)
table(is.na(TBMU_divorce$Laying))
table(is.na(TBMU_divorce$Fledge))
table(is.na(TBMU_divorce$AgeMale))
table(is.na(TBMU_divorce$AgeFemale))
table(is.na(TBMU_divorce$AgeBird1))
table(is.na(TBMU_divorce$AgeBird2))
table(is.na(TBMU_divorce$Laying))
table(is.na(TBMU_divorce$Fledge))
table(is.na(TBMU_divorce$AgeMale))
table(is.na(TBMU_divorce$AgeFemale))
table(is.na(TBMU_divorce$AgeBird1))
table(is.na(TBMU_divorce$AgeBird2))
table(is.na(TBMU_divorce$ExpMale))
table(is.na(TBMU_divorce$ExpFemale))
table(is.na(TBMU_divorce$ExpBird1))
table(is.na(TBMU_divorce$ExpBird2))
table(is.na(TBMU_divorce$PairBond))
table(is.na(TBMU_divorce$QLTY))
TBMU_divorce_clean = TBMU_divorce %>% na.omit()
View(TBMU_divorce_clean)
View(TBMU_divorce)
View(TBMU_divorce)
TBMU_divorce_clean = TBMU_divorce %>% select(-Hatching) %>% na.omit()
TBMU_divorce_clean = TBMU_divorce %>% select(c(-Hatching,-Outcome) %>% na.omit()
TBMU_divorce_clean = TBMU_divorce %>% select(c(-Hatching,-Outcome)) %>% na.omit()
View(TBMU_divorce_clean)
TBMU_divorce_clean = TBMU_divorce %>% select(c(-Hatching,-Outcome)) %>% na.omit()
TBMU_divorce_clean1 = TBMU_divorce %>% select(c(-Hatching,-Outcome,-AgeMale, -AgeFemale, -ExpMale, -ExpFemale)) %>% na.omit()
library(dplyr)
library(glmmTMB)
library(MuMIn)
plot(AgeMale ~ ExpMale, data = TBMU_divorce_clean)
plot(AgeFemale ~ ExpFemale, data = TBMU_divorce_clean)
plot(AgeFemale ~ PairBond, data = TBMU_divorce_clean)
plot(AgeMale ~ PairBond, data = TBMU_divorce_clean)
plot(density(TBMU_divorce_clean$AgeMale))
hist(TBMU_divorce_clean$AgeMale)
hist(TBMU_divorce_clean$AgeMale,breaks = 20)
hist(TBMU_divorce_clean$AgeFemale,breaks = 20)
hist(TBMU_divorce_clean$ExpFemale,breaks = 20)
hist(TBMU_divorce_clean$ExpMale,breaks = 20)
hist(TBMU_divorce_clean$PairBond,breaks = 20)
library(dplyr)
library(glmmTMB)
library(MuMIn)
library(corrplot)
View(TBMU_divorce_clean)
cor_div = cor(TBMU_divorce_clean[,c(5,7:8,11:12,15:16)])
corrplot.mixed(cor_div, upper = "ellipse", lower = "number")
?vif
??vif
source(file = "HighstatLib.R") # this is an R code containing functions created by Zuur et al., just have it in your working directory
View(corvif)
View(myvif)
?glmmTMB
mod = glmmTMB(ProbDiv ~ Fledge + AgeMale + ExpMale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial")
mod = glmmTMB(ProbDiv ~ Fledge + AgeMale + ExpMale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
corvif(mod)
myvif(mod)
corvif(TBMU_divorce_clean[,c(5,7:8,11:12,15:16)])
corvif(TBMU_divorce_clean[,c(5:8,11:12,15:16)])
corvif(TBMU_divorce_clean[,c(5:8,15:16)])
?dredge
summary(mod)
library(dplyr)
library(glmmTMB)
library(MuMIn)
library(corrplot)
library(arm)
TBMU_divorce_clean %>% mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale)) %>% rescale(stdAgeMale)
TBMU_divorce_clean %>% mutate(stdAgeMale = if_else(as.numeric(AgeMale) >=20,20,AgeMale)) %>% rescale(stdAgeMale)
TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric %>% mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale)) %>% rescale(stdAgeMale)
TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric) %>% mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale)) %>% rescale(stdAgeMale)
TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric)
TBMU_divorce_clean = TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric)
TBMU_divorce_clean = TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric) %>% mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale))
TBMU_divorce_clean = TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric) %>% mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale)) %>% rescale(stdAgeMale)
TBMU_divorce_clean = TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric) %>% mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale)) %>% transmute(stdAgeMale = rescale(stdAgeMale))
TBMU_divorce = read.table("TBMU_Coats_divorce_data.csv", header = TRUE, sep = ",")
dim(TBMU_divorce)
TBMU_divorce = TBMU_divorce %>% filter(Outcome != "DEAD")
dim(TBMU_divorce)
TBMU_divorce = TBMU_divorce %>% mutate(ProbDiv = if_else(Outcome == "DIV",1,0))
TBMU_divorce_clean = TBMU_divorce %>% select(c(-Hatching,-Outcome)) %>% na.omit()
rm(list=ls())
TBMU_divorce = read.table("TBMU_Coats_divorce_data.csv", header = TRUE, sep = ",")
dim(TBMU_divorce)
TBMU_divorce = TBMU_divorce %>% filter(Outcome != "DEAD")
dim(TBMU_divorce)
TBMU_divorce = TBMU_divorce %>% mutate(ProbDiv = if_else(Outcome == "DIV",1,0))
TBMU_divorce_clean = TBMU_divorce %>% select(c(-Hatching,-Outcome)) %>% na.omit()
TBMU_divorce_clean = TBMU_divorce %>% select(-Hatching) %>% na.omit()
library(dplyr)
library(glmmTMB)
library(MuMIn)
library(corrplot)
library(arm)
TBMU_divorce_clean = select(TBMU_divorce, -Hatching)
TBMU_divorce_clean = select(TBMU_divorce, - Hatching)
TBMU_divorce_clean = select(TBMU_divorce, - Outcome)
TBMU_divorce_clean = TBMU_divorce %>% dplyr::select(c(-Hatching,-Outcome)) %>% na.omit()
source(file = "HighstatLib.R")
corvif(TBMU_divorce_clean[,c(5:8,15:16)])
TBMU_divorce_clean = TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric) %>% mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale)) %>% mutate(stdAgeMale = arm::rescale(stdAgeMale))
table(TBMU_divorce_clean$PairBond)
TBMU_divorce_clean = TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric) %>%
mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale), stdAgeFemale = if_else(AgeFemale >= 20, 20, AgeFemale), stdExpMale = if_else(ExpMale >= 15, 15, ExpMale), stdExpFemale = if_else(ExpFemale >= 15, 15, ExpFemale), stdPairBond = if_else(PairBond >= 10, 10, PairBond)) %>%
mutate(stdAgeMale = arm::rescale(stdAgeMale), stdAgeFemale = rescale(stdAgeFemale), stdExpMale = rescale(stdExpMale), stdExpFemale = rescale(stdExpFemale), stdPairBond = rescale(stdPairBond))
TBMU_divorce_clean = TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric) %>%
mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale), stdAgeFemale = if_else(AgeFemale >= 20, 20, AgeFemale), stdExpMale = if_else(ExpMale >= 15, 15, ExpMale), stdExpFemale = if_else(ExpFemale >= 15, 15, ExpFemale), stdPairBond = if_else(PairBond >= 10, 10, PairBond)) %>%
mutate(stdAgeMale = arm::rescale(stdAgeMale), stdAgeFemale = rescale(stdAgeFemale), stdExpMale = rescale(stdExpMale), stdExpFemale = rescale(stdExpFemale), stdPairBond = rescale(stdPairBond), stdQlty = rescale(QLTY), stdFledge = rescale(Fledge), stdLaying = rescale(Laying))
?glmmTMB
mod_div = list()
## 2-way interactions with fledging probability
mod_div[[1]] = glmmTMB(ProbDiv ~ stdFledge * stdAgeMale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[2]] = glmmTMB(ProbDiv ~ stdFledge * stdAgeFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[3]] = glmmTMB(ProbDiv ~ stdFledge * stdExpMale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[4]] = glmmTMB(ProbDiv ~ stdFledge * stdExpFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[5]] = glmmTMB(ProbDiv ~ stdFledge * stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[6]] = glmmTMB(ProbDiv ~ stdFledge * stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[7]] = glmmTMB(ProbDiv ~ stdFledge * stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## 2-way interactions with male age
mod_div[[8]] = glmmTMB(ProbDiv ~ stdAgeMale * stdAgeFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[9]] = glmmTMB(ProbDiv ~ stdAgeMale * stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[10]] = glmmTMB(ProbDiv ~ stdAgeMale * stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[11]] = glmmTMB(ProbDiv ~ stdAgeMale * stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## 2-way interactions with female age
mod_div[[12]] = glmmTMB(ProbDiv ~ stdAgeFemale * stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[13]] = glmmTMB(ProbDiv ~ stdAgeFemale * stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[14]] = glmmTMB(ProbDiv ~ stdAgeFemale * stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## 2-way interaction with male breeding experience
mod_div[[15]] = glmmTMB(ProbDiv ~ stdExpMale * stdExpFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[16]] = glmmTMB(ProbDiv ~ stdExpMale * stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[17]] = glmmTMB(ProbDiv ~ stdExpMale * stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[18]] = glmmTMB(ProbDiv ~ stdExpMale * stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## 2-way interactions with female breeding experience
mod_div[[19]] = glmmTMB(ProbDiv ~ stdExpFemale * stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[20]] = glmmTMB(ProbDiv ~ stdExpFemale * stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[21]] = glmmTMB(ProbDiv ~ stdExpFemale * stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## 2-way interactions with pair-bond duration
mod_div[[22]] = glmmTMB(ProbDiv ~ stdPairBond * stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[23]] = glmmTMB(ProbDiv ~ stdPairBond * stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## 2-way interactions with site quality
mod_div[[24]] = glmmTMB(ProbDiv ~ stdQlty * stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## additive models with fledging probability
mod_div[[25]] = glmmTMB(ProbDiv ~ stdFledge + stdAgeMale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[26]] = glmmTMB(ProbDiv ~ stdFledge + stdAgeFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[27]] = glmmTMB(ProbDiv ~ stdFledge + stdExpMale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[28]] = glmmTMB(ProbDiv ~ stdFledge + stdExpFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[29]] = glmmTMB(ProbDiv ~ stdFledge + stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[30]] = glmmTMB(ProbDiv ~ stdFledge + stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[31]] = glmmTMB(ProbDiv ~ stdFledge + stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
##\ additive models with male age
mod_div[[32]] = glmmTMB(ProbDiv ~ stdAgeMale + stdAgeFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[33]] = glmmTMB(ProbDiv ~ stdAgeMale + stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[34]] = glmmTMB(ProbDiv ~ stdAgeMale + stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[35]] = glmmTMB(ProbDiv ~ stdAgeMale + stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## additive models with female age
mod_div[[36]] = glmmTMB(ProbDiv ~ stdAgeFemale + stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[37]] = glmmTMB(ProbDiv ~ stdAgeFemale + stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[38]] = glmmTMB(ProbDiv ~ stdAgeFemale + stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## additive models with male breeding experience
mod_div[[39]] = glmmTMB(ProbDiv ~ stdExpMale + stdExpFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[40]] = glmmTMB(ProbDiv ~ stdExpMale + stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[41]] = glmmTMB(ProbDiv ~ stdExpMale + stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[42]] = glmmTMB(ProbDiv ~ stdExpMale + stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## additive models with female breeding experience
mod_div[[43]] = glmmTMB(ProbDiv ~ stdExpFemale + stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[44]] = glmmTMB(ProbDiv ~ stdExpFemale + stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[45]] = glmmTMB(ProbDiv ~ stdExpFemale + stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## additive models with pair-bond duration
mod_div[[46]] = glmmTMB(ProbDiv ~ stdPairBond + stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[47]] = glmmTMB(ProbDiv ~ stdPairBond + stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## additive models with site quality
mod_div[[48]] = glmmTMB(ProbDiv ~ stdQlty + stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
## single effects models
mod_div[[49]] = glmmTMB(ProbDiv ~ stdFledge + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[50]] = glmmTMB(ProbDiv ~ stdAgeMale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[51]] = glmmTMB(ProbDiv ~ stdAgeFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[52]] = glmmTMB(ProbDiv ~ stdExpMale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[53]] = glmmTMB(ProbDiv ~ stdExpFemale + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[54]] = glmmTMB(ProbDiv ~ stdPairBond + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[55]] = glmmTMB(ProbDiv ~ stdQlty + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[56]] = glmmTMB(ProbDiv ~ stdLaying + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[57]] = glmmTMB(ProbDiv ~ Year + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[58]] = glmmTMB(ProbDiv ~ Year + I(Year^2) + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[59]] = glmmTMB(ProbDiv ~ 1 + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
TBMU_divorce_clean = TBMU_divorce_clean %>% mutate_if(is.integer, as.numeric) %>%
mutate(stdAgeMale = if_else(AgeMale >=20,20,AgeMale), stdAgeFemale = if_else(AgeFemale >= 20, 20, AgeFemale), stdExpMale = if_else(ExpMale >= 15, 15, ExpMale), stdExpFemale = if_else(ExpFemale >= 15, 15, ExpFemale), stdPairBond = if_else(PairBond >= 10, 10, PairBond)) %>%
mutate(stdAgeMale = arm::rescale(stdAgeMale), stdAgeFemale = rescale(stdAgeFemale), stdExpMale = rescale(stdExpMale), stdExpFemale = rescale(stdExpFemale), stdPairBond = rescale(stdPairBond), stdQlty = rescale(QLTY), stdFledge = rescale(Fledge), stdLaying = rescale(Laying),stdYear = rescale(Year))
mod_div[[57]] = glmmTMB(ProbDiv ~ stdYear + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
mod_div[[58]] = glmmTMB(ProbDiv ~ stdYear + I(stdYear^2) + (1|Year) + (1|Site) + (1|BandNo1) + (1|BandNo2), family = "binomial", data = TBMU_divorce_clean)
summary(mod_div[[12]])
AIC_div = model.sel(mod_div, rank = "AICc")
AIC_div
sub_AIC_div = subset(AIC_div,  cumsum(weight) <= .95, recalc.weights = FALSE)
sub_AIC_div
sub_AIC_div
?subset.model.selection
sub_AIC_div = subset(AIC_div,  delta <= 6, recalc.weights = FALSE)
sub_AIC_div
plot(AIC_div)
mod_div[delta<=6]
mod_div[mod_div$delta<=6]
install.packages("MuMIn", repos="http://R-Forge.R-project.org")
install.packages("MuMIn", repos = "http://R-Forge.R-project.org")
install.packages("MuMIn", repos = "http://R-Forge.R-project.org")
install.packages("MuMIn", repos = "http://R-Forge.R-project.org")
install.packages("MuMIn", repos = "http://R-Forge.R-project.org")
library(MuMIn)
library("MuMIn", lib.loc="~/R/win-library/3.4")
